-- delete gui nodes holding file entries
local exlorer_model = require("main/ui/example/explorer_model")
local druid = require("druid.druid")

local path_scroll
local grid

local function delete_file_nodes(nodes)
	while #nodes > 0 do
		local file = table.remove(nodes)
		gui.delete_node(file.rootnode)
	end
end


local function show_text(self, text)
	delete_file_nodes(self.files)
	gui.set_enabled(self.closenode, true)
	gui.set_enabled(self.textnode, true)
	gui.set_text(self.textnode, text)
end


--- Show the first 1000 bytes of a file
local function show_file(self, filename)
	local file, err = io.open(lfs.currentdir() .. "/" .. filename, "rb")
	if not file then
		show_text(self, err)
	else
		show_text(self, file:read(1000))
	end
end


local function show_current_dir(self)
	gui.set_enabled(self.closenode, false)
	gui.set_enabled(self.textnode, false)

	local pool = self.files
	self.files = {}

	local ok, err = pcall(function()
		-- get current dir and show it
		local currentdir = lfs.currentdir()
		gui.set_text(gui.get_node("current_directory"), currentdir or "?")
	
		-- iterate current dir and show it's contents
		-- reuse nodes or create new ones
		for filename in lfs.dir(currentdir) do
			local file = table.remove(pool)
			if not file then
				local nodes = gui.clone_tree(self.fileproto)
				file = {
					rootnode = nodes[hash("fileproto/root")],
					nodes = nodes,
				}
				gui.set_enabled(file.rootnode, true)
			end
			gui.set_position(file.rootnode, gui.get_position(self.fileproto) - vmath.vector3(0, 45, 0) * #self.files)
			table.insert(self.files, file)
			
			-- get file attributes and show permissions and file size
			gui.set_text(file.nodes[hash("fileproto/name")], filename)
			local attributes = lfs.attributes(currentdir .. "/" .. filename)
			gui.set_text(file.nodes[hash("fileproto/permissions")], attributes and attributes.permissions or "?")
			gui.set_text(file.nodes[hash("fileproto/size")], attributes and attributes.size or "?")
			
			file.name = filename
			file.attributes = attributes or {}
		end
	end)

	-- delete any left over file nodes that we didn't need
	delete_file_nodes(pool)

	-- show error if something went wrong
	if not ok then
		show_text(self, err)
	end
	return ok
end


-- change directory and show it's contents
local function show_dir(self, dir)
	local ok, err = pcall(function()
		local currentdir = lfs.currentdir()
		lfs.chdir(dir)
		if not show_current_dir(self) then
			lfs.chdir(currentdir)
		end
	end)
	if not ok then
		show_text(self, err)
	end
end


function init(self)
	msg.post(".", "acquire_input_focus")
   self.druid = druid.new(self)
   path_scroll = self.druid:new_scroll("scroll_root", "scroll_content")
	grid = self.druid:new_static_grid("scroll_content", "prefab_path", 1)
	path_scroll:set_horizontal_scroll(false)
   path_scroll.on_scroll:subscribe(function(_, point)
		local y = path_scroll:get_percent().y
		--scroll_slider:set(y, true)
	end)

	self.files = {}
	self.fileproto = gui.get_node("fileproto/root")
	self.textnode = gui.get_node("text")
	self.closenode = gui.get_node("close")
	gui.set_enabled(self.fileproto, false)
	gui.set_enabled(self.textnode, false)
   exlorer_model.set_curent_directory(lfs.currentdir())
	
	-- change to application home if on android
	-- (non rooted devices probably don't have read
	-- access to anything else)
	local sys_info = sys.get_sys_info()
	if sys_info.system_name == "Android" then
		show_dir(sys.get_save_file("lfs", "."))
	else
		show_current_dir(self)
	end
end

function final(self)
   self.druid:final()
end 

function update(self, dt)
   self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
   self.druid:on_message(message_id, message, sender)
end


function on_input(self, action_id, action)
	if action_id == hash("touch") and action.released then
		for _,file in pairs(self.files) do
			if gui.pick_node(file.rootnode, action.x, action.y) then
				-- directory, change dir and show file contents
				if file.attributes.mode == "directory" then
					show_dir(self, file.name)
				-- file, show contents
				else
					show_file(self, file.name)
				end
				return true
			end
		end
		
		-- close button, switch back to current dir
		if gui.pick_node(self.closenode, action.x, action.y) and gui.is_enabled(self.closenode) then
			show_current_dir(self)
		end
	end
   return self.druid:on_input(action_id, action)
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
