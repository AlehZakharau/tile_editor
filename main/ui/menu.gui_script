local input = require("libraries/mobile_input/input")
local hex = require("libraries/hexagon/hexagon")
local map = require("main/code/map")
local explorer_model = require("main/ui/example/explorer_model")
local cursor_model = require("main/code/cursor")

local coord_text_node
local world_coord_text_node
local level_text_node
local save_button_node
local current_directory_text_node

local left_panel_node
local right_panel_node

local level_1_node
local level_2_node
local new_level_node

function init(self)
   msg.post(".", "acquire_input_focus")
   coord_text_node = gui.get_node("label_coord")
   world_coord_text_node = gui.get_node("label_world_coord")
   level_text_node = gui.get_node("level_label")
   save_button_node = gui.get_node("save_button")
   current_directory_text_node = gui.get_node("label_current_directory")
   level_1_node = gui.get_node("level_1")
   level_2_node = gui.get_node("level_2")
   left_panel_node = gui.get_node("left_panel")
   right_panel_node = gui.get_node("right_panel")
   new_level_node = gui.get_node("new_level")
   self.left_panel_size = gui.get_size(left_panel_node)
   self.right_panel_size = gui.get_size(right_panel_node)
   self.width = gui.get_width()
   gui.set_text(level_text_node, "Level: " .. map.current_level)
end

function update(self, dt)
   local world_position = input.get_cursor_world_position()
   local q, r = hex.pixel_to_flat_hex(world_position)
   gui.set_text(coord_text_node, q .. " : " .. r)
   gui.set_text(world_coord_text_node,  string.format("%.1f", world_position.x) .. " : " .. string.format("%.1f", world_position.y))
end

function on_input(self, action_id, action)
    local cursor_position = input.get_cursor_position()
   if cursor_position.x < self.left_panel_size.x or 
   cursor_position.x > self.width - self.right_panel_size.x then
      cursor_model.turn_off_free_mode()
   elseif cursor_model.free_cursor_mode == false then
      cursor_model.turn_on_free_mode()
   end
   if action_id == hash("touch") and action.pressed then
      if gui.pick_node(save_button_node, action.x, action.y) then
         print("map saved")
         map.save_current_map(1)
         map.save_profile()
      end
      if gui.pick_node(level_1_node, action.x, action.y) then
         msg.post("/main#artist", "change_map", {level = 1})
      end
      if gui.pick_node(level_2_node, action.x, action.y) then
         msg.post("/main#artist", "change_map", {level = 2})
      end
      if gui.pick_node(new_level_node, action.x, action.y) then
         msg.post("/main#artist", "new_map")
      end
   end
end

function on_message(self, message_id, message)
   if message_id == hash("update_directory") then
      gui.set_text(current_directory_text_node, message.directory)
   end
   if message_id == hash("update_lecel") then 
      gui.set_text(level_text_node, "Level: " .. map.current_level)
   end
end
