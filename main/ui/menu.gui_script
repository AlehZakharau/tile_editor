local input = require("lib/mobile_input/input")
local hex = require("lib/hexagon/hexagon")
local map = require("main/code/map")
local cursor_model = require("main/code/cursor")
local druid = require("druid.druid")
local druid_input = require("druid.extended.input")
local hash_table = require("main/hash_table")

local coord_text_node
local tile_count_node
local world_coord_text_node
local level_text_node
local save_button_node
local current_directory_text_node

local left_panel_node
local right_panel_node
local new_level_node

local path_input_field

local level_prefab
local level_buttons = {}

local function add_level_button(self, level)
   local clone = gui.clone_tree(level_prefab)
   gui.set_enabled(clone["level_prefab"], true)
   local pos = vmath.vector3(50, -50 - 30 * level, 0.2)
   gui.set_position(clone["level_prefab"], pos) 
   table.insert(level_buttons, {node = clone["level_prefab"], level = level})
   gui.set_text(clone["level_button_label"], "Level_" .. level)
end

local function set_up_level_scroll(self)
   local levels = map.get_levels_amount()
   for i = 1, levels, 1 do
      add_level_button(self, i)
   end
   if levels == 0 then add_level_button(self, 1) end
end

function init(self)
   self.druid = druid.new(self)
   druid.register("input", druid_input)
   coord_text_node = gui.get_node("label_coord")
   world_coord_text_node = gui.get_node("label_world_coord")
   level_text_node = gui.get_node("level_label")
   save_button_node = gui.get_node("save_button")
   left_panel_node = gui.get_node("left_panel")
   right_panel_node = gui.get_node("right_panel")
   new_level_node = gui.get_node("new_level")
   tile_count_node = gui.get_node("label_tile_count")

   level_prefab = gui.get_node("level_prefab")
   gui.set_enabled(level_prefab, false)

   self.left_panel_size = gui.get_size(left_panel_node)
   self.right_panel_size = gui.get_size(right_panel_node)
   self.width = gui.get_width()
   
   gui.set_text(level_text_node, "Level: " .. map.current_level)
   path_input_field = self.druid:new_input("input_box_path", "input_text_path")
   path_input_field:set_text(map.save_path)
end

function update(self, dt)
   self.druid:update(dt)
   local world_position = input.get_cursor_world_position()
   local q, r = hex.pixel_to_flat_hex(world_position)
   gui.set_text(coord_text_node, q .. " : " .. r)
   gui.set_text(world_coord_text_node,  string.format("%.1f", world_position.x) .. " : " .. string.format("%.1f", world_position.y))
end

function final(self)
   self.druid:final()
end

function on_input(self, action_id, action)
   local cursor_position = input.get_cursor_position()
   if cursor_position.x < self.left_panel_size.x or 
   cursor_position.x > self.width - self.right_panel_size.x then
      cursor_model.turn_off_free_mode()
   elseif cursor_model.hold == false then
      cursor_model.turn_on_free_mode()
   end
   if action_id == hash("touch") and action.pressed then
      if gui.pick_node(save_button_node, action.x, action.y) then
         map.save_profile()
      end
      if gui.pick_node(new_level_node, action.x, action.y) then
         local level = map.current_level
         add_level_button(self, level + 1)
         msg.post("/main#artist", "new_map")
      end
      for k, v in pairs(level_buttons) do
         if gui.pick_node(v.node, action.x, action.y) then
            msg.post("/main#artist", "change_map", {level = v.level})
         end
      end
   end
   if action_id == hash("mouse_button_2") and action.pressed then
      for k, v in pairs(level_buttons) do
         if gui.pick_node(v.node, action.x, action.y) then
            map.remove_map(v.level)
            gui.delete_node(v.node)
            level_buttons[v.level] = nil
         end
      end
   end
   return self.druid:on_input(action_id, action)
end

function on_message(self, message_id, message, sender)
   if message_id == hash("update_directory") then
      gui.set_text(current_directory_text_node, message.directory)
   end
   if message_id == hash("update_level") then 
      gui.set_text(level_text_node, "Level: " .. map.current_level)
   end
   if message_id == hash("init_levels") then 
      set_up_level_scroll(self)
   end
   if message_id == hash_table.tile_spawned then
      gui.set_text(tile_count_node, "Tiles: " .. message.tiles)
   end
   self.druid:on_message(message_id, message, sender)
end
