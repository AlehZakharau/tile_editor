local map = require("main/code/maps")
local druid = require("druid.druid")
local druid_input = require("druid.extended.input")
local hash_table = require("main/hash_table")
local input = require("lib/mobile_input/input")
local cursor_model = require("main/code/cursor")
local hex = require("lib/hexagon/hexagon")
local data_io = require("main/code/data_io")

local buttons = {}
local map_buttons = {}
local profile_buttons = {}
local profile_list_status = false

function init(self)
   self.druid = druid.new(self)
   buttons.profile_text = gui.get_node("profile_text")
   buttons.map_text = gui.get_node("map_label")
   buttons.prefab = gui.get_node("button_prefab")
   gui.set_enabled(buttons.prefab, false)
   buttons.left_panel_node = gui.get_node("left_panel")
   buttons.right_panel_node = gui.get_node("right_panel")
   buttons.coord_text_node = gui.get_node("label_coord")
   buttons.world_coord_text_node = gui.get_node("label_world_coord")
   buttons.tile_count_node = gui.get_node("label_tile_count")
   buttons.map_scroll = self.druid:new_scroll("map_scroll_root", "map_scroll_content")
   buttons.map_scroll:set_horizontal_scroll(false)
   buttons.map_grid  = self.druid:new_static_grid("map_scroll_content", buttons.prefab, 1)
   buttons.profile_root = gui.get_node("profile_scroll_root")
   buttons.profile_scroll = self.druid:new_scroll(buttons.profile_root, "profile_scroll_content")
   buttons.profile_scroll:set_horizontal_scroll(false)
   buttons.profile_grid = self.druid:new_static_grid("profile_scroll_content", buttons.prefab, 1)
   buttons.new_profile_button = gui.get_node("new_profile")
   buttons.new_map_button = gui.get_node("new_map")
   buttons.save_button = gui.get_node("save_button")

   self.left_panel_size = gui.get_size(buttons.left_panel_node)
   self.right_panel_size = gui.get_size(buttons.right_panel_node)
   self.left_wide_panel = 2 * self.left_panel_size.x
   gui.set_enabled(buttons.profile_root, false)
   gui.set_enabled(buttons.new_profile_button, false)
   self.width = gui.get_width()
end

function update(self, dt)
   self.druid:update(dt)
   local world_position = input.get_cursor_world_position()
   local q, r = hex.pixel_to_flat_hex(world_position)
   gui.set_text(buttons.coord_text_node, q .. " : " .. r)
   gui.set_text(buttons.world_coord_text_node,  string.format("%.1f", world_position.x) .. " : " .. string.format("%.1f", world_position.y))
end

function final(self)
   self.druid:final()
end

----------------------------------------
-- -- -- --'PROFILE BUTTONS'-- -- -- --
----------------------------------------

local function dissable_all_profile_buttons()
   for i = 1, #profile_buttons, 1 do
      gui.set_enabled(profile_buttons[i].button, false)
   end
end

local function create_profile_buttons(self, profiles)
   local profile_amount = map.get_profiles_amount()
   if profile_amount > #profile_buttons then
      for i = 1, profile_amount - #profile_buttons, 1 do
         local clone_prefab = gui.clone_tree(buttons.prefab)
         buttons.profile_grid:add(clone_prefab["button_prefab"])
         local button_data = {
            button = clone_prefab["button_prefab"],
            label = clone_prefab["button_label"],
            profile = "d"
         }
         table.insert(profile_buttons, button_data)
      end
   end
end

local function update_profile_buttons(self)
   dissable_all_profile_buttons()
   local profiles = map.get_profiles()
   create_profile_buttons(self, profiles)
   local index = 1
   for k, v in pairs(profiles) do
      gui.set_text(profile_buttons[index].label, k)
      gui.set_enabled(profile_buttons[index].button, true)
      profile_buttons[index].profile = k
      index = index + 1
   end
end

local function get_new_profile_name()
   local new_profile_name = "d"
   local profile_index = map.get_profiles_amount()
   repeat
         profile_index = profile_index + 1
         new_profile_name = "pro_" .. profile_index
   until map.has_profile(new_profile_name) == false
   return new_profile_name
end

----------------------------------------
-- -- -- --'MAPS SCROLL'-- -- -- --
----------------------------------------

local function dissable_all_maps_buttons()
   for i = 1, #map_buttons, 1 do
      gui.set_enabled(map_buttons[i].button, false)
   end
end

local function create_map_buttons(self, maps)
   local maps_amount = map.get_maps_amount()
   if maps_amount > #map_buttons then
      for i = 1, maps_amount - #map_buttons, 1 do
         local clone_prefab = gui.clone_tree(buttons.prefab)
         buttons.map_grid:add(clone_prefab["button_prefab"])
         local button_data = {
            button = clone_prefab["button_prefab"],
            label = clone_prefab["button_label"],
            map = "d"
         }
         table.insert(map_buttons, button_data)
      end
   end
end

local function update_maps_buttons(self)
   dissable_all_maps_buttons()
   local maps = map.get_maps(map.current_profile)
   create_map_buttons(self, maps)
   local index = 1
   for k, v in pairs(maps) do
      gui.set_text(map_buttons[index].label, k)
      gui.set_enabled(map_buttons[index].button, true)
      map_buttons[index].map = k
      index = index + 1
   end
end

local function get_new_map_name()
   local new_map_name = "d"
   local map_index = map.get_maps_amount()
   repeat
      map_index = map_index + 1
      new_map_name = "map_" .. map_index
   until map.has_profile(new_map_name) == false
   return new_map_name
end


function on_input(self, action_id, action)
   if action_id == hash("touch") and action.pressed then
      if gui.pick_node(buttons.profile_text, action.x, action.y) then
         profile_list_status = not profile_list_status
         if profile_list_status then
            gui.set_enabled(buttons.profile_root, true)
            gui.set_enabled(buttons.new_profile_button, true)
         else
            gui.set_enabled(buttons.profile_root, false)
            gui.set_enabled(buttons.new_profile_button, false)
         end
      end
      if gui.pick_node(buttons.new_map_button, action.x, action.y) then
         local new_name = get_new_map_name()
         map.add_map(new_name)
      end
      if gui.pick_node(buttons.new_profile_button, action.x, action.y) then
         local new_name = get_new_profile_name()
         map.add_profile(new_name)
      end
      if gui.pick_node(buttons.save_button, action.x, action.y) then 
         data_io.save_maps()
      end
      for i = 1, #map_buttons, 1 do
         if gui.pick_node(map_buttons[i].button, action.x, action.y) then
            map.open_map(map_buttons[i].map)
         end
      end
      if profile_list_status then
         for i = 1, #profile_buttons, 1 do
            if gui.pick_node(profile_buttons[i].button, action.x, action.y) then
               map.open_profile(profile_buttons[i].profile)
            end
         end
      end
   end
   if action_id == hash("mouse_button_2") and action.pressed then
      for i = 1, #map_buttons, 1 do
         if gui.pick_node(map_buttons[i].button, action.x, action.y) then
            map.remove_map(map_buttons[i].map)
         end
      end
      if profile_list_status then
         for i = 1, #profile_buttons, 1 do
            if gui.pick_node(profile_buttons[i].button, action.x, action.y) then
               map.remove_profile(profile_buttons[i].profile)
            end
         end
      end
   end
   local cursor_position = input.get_cursor_position()
   if cursor_position.x < self.left_panel_size.x or 
   (profile_list_status and cursor_position.x < self.left_wide_panel) or
   cursor_position.x > self.width - self.right_panel_size.x then
      cursor_model.turn_off_free_mode()
   elseif cursor_model.hold == false then
      cursor_model.turn_on_free_mode()
   end
   return self.druid:on_input(action_id, action)
end

function on_message(self, message_id, message, sender)
   if message_id == hash_table.profile_updated then
      gui.set_text(buttons.profile_text, message.name)
      update_profile_buttons(self)
      update_maps_buttons(self)
   end
   if message_id == hash_table.map_updated then
      gui.set_text(buttons.map_text, "Map: " .. message.name)
      gui.set_text(buttons.tile_count_node, "Tiles: " .. map.tile_count)
      update_maps_buttons(self)
   end
   if message_id == hash_table.tile_added then
      gui.set_text(buttons.tile_count_node, "Tiles: " .. map.tile_count)
   end
   if message_id == hash_table.tile_removed then
      gui.set_text(buttons.tile_count_node, "Tiles: " .. map.tile_count)
   end
   self.druid:on_message(message_id, message, sender)
end