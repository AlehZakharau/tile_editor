local camera_model = require "libraries/orthographic.camera"
local input = require ("libraries/mobile_input/input")
local cursor_model = require("main/code/cursor")

local main_camera = hash("/camera")
local cursor = hash("/cursor")
local camera_archon = hash("/camera_archon")

local camera_speed = 15

local cursor_previous_position = vmath.vector3()

function window_callback(self, event, data)
   if event == window.WINDOW_EVENT_FOCUS_LOST then
      defos.set_cursor_visible(true)
      defos.set_cursor(self.cursors[1])
   elseif event == window.WINDOW_EVENT_FOCUS_GAINED then
       if cursor_model.free_cursor_mode == true then
         cursor_model.turn_on_free_mode()
       else
         cursor_model.turn_off_free_mode()
       end
   elseif event == window.WINDOW_EVENT_ICONFIED then
       print("window.WINDOW_EVENT_ICONFIED")
   elseif event == window.WINDOW_EVENT_DEICONIFIED then
       print("window.WINDOW_EVENT_DEICONIFIED")
   elseif event == window.WINDOW_EVENT_RESIZED then
       print("Window resized: ", data.width, data.height)
   end
end

function init(self)
   msg.post(".", "acquire_input_focus")
   cursor_model.turn_on_free_mode()
   --turn_off_free_mode()
   window.set_listener(window_callback)
   defos.set_cursor_locked(false)
   self.cursors = { defos.CURSOR_HAND, defos.CURSOR_ARROW, defos.CURSOR_CROSSHAIR, defos.CURSOR_IBEAM, }
end

function update(self, dt)
   if cursor_model.free_cursor_mode then 
      local cursor_position = input.get_cursor_world_position()
      go.set_position(cursor_position, cursor)
   end
end

local function grab_mode(self, action_id, action)
   if action_id == hash("key_space") and action.pressed then
      cursor_previous_position = input.get_cursor_position()
      defos.set_cursor(self.cursors[1])
      cursor_model.turn_off_free_mode()
   end
   if action_id == hash("key_space") and input.get_touch_status() then
      defos.set_cursor(self.cursors[3])
      camera_model.follow(main_camera, camera_archon, {lepr = 0.4, horizontal = true, vertical = true, immediate = true})
      local cursor_object = go.get_position(camera_archon) 
      local cursor_position = input.get_cursor_position()
      local delta = cursor_position - cursor_previous_position
      local delta_length = vmath.length(delta)
      delta = vmath.normalize(delta)
      if delta_length < 150 and delta_length > 0 then 
         cursor_previous_position = input.get_cursor_position() 
         go.set_position(cursor_object - delta * camera_speed, camera_archon)
      end
   end
   if action_id == hash("key_space") and action.released then
      cursor_model.turn_on_free_mode()
      camera_model.unfollow(main_camera)
      cursor_previous_position = vmath.vector3(0, 0, 0) 
   end
end

function on_input(self, action_id, action)
   grab_mode(self, action_id, action)
end